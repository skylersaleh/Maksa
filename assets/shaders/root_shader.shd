#include <assets/shaders/common.h>

#ifdef VERTEX_SHADER
layout(location = 0) in float mk_vertex_id;
void main() {
  const vec2 verts[4] = vec2[4](vec2(-1.0, -1.0), vec2(1.0, -1.0),
                                vec2(-1.0, 1.0), vec2(1.0, 1.0));
  gl_Position = vec4(verts[gl_VertexID], 0.0, 1.0);
}
#endif
#ifdef PIXEL_SHADER
vec3 angle;
vec3 light = vec3(0., 1., -4.);

vec3 repeat(vec3 p, vec3 c) { return mod(p, c) - 0.5 * c; }
vec4 box(vec3 p, vec3 b, vec3 material) {
  vec3 d = abs(p) - b;
  return vec4(min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0)),
              material);
}
vec4 torus(vec3 p, vec2 t, vec3 material) {
  vec2 q = vec2(length(p.xz) - t.x, p.y);
  return vec4(length(q) - t.y, material);
}
vec4 sphere(vec3 p, float r, vec3 material) {
  return vec4(length(p) - r, material);
}
vec2 rotate(vec2 p, float theta) {
  return vec2(cos(theta) * p.x + sin(theta) * p.y,
              cos(theta) * p.y - sin(theta) * p.x);
}
float distance_sq(vec3 a, vec3 b) {
  vec3 t = a - b;
  return dot(t, t);
}
float fractal(vec3 z) {
  float s = 1.0;
  vec3 a1 = vec3(1, 1, 1) * s;
  vec3 a2 = vec3(-1, -1, 1) * s;
  vec3 a3 = vec3(1, -1, -1) * s;
  vec3 a4 = vec3(-1, 1, -1) * s;
  vec3 c;
  float n = 0.0;
  float dist = 1.e9, d;
  float Scale = 2.;
  while (n < 15.0) {
    c = a1;
    dist = distance_sq(z, a1);
    if ((d = distance_sq(z, a2)) < dist) {
      c = a2;
      dist = d;
    }
    if ((d = distance_sq(z, a3)) < dist) {
      c = a3;
      dist = d;
    }
    if ((d = distance_sq(z, a4)) < dist) {
      c = a4;
      dist = d;
    }
    z = Scale * z - c * (Scale - 1.0);
    ++n;
  }

  return length(z) * pow(Scale, -n);
}
float mandelbulb(vec3 pos) {
  float d = sphere(pos, 1.1, vec3(1.)).r;
  if (d > 0.3) return d;
  vec3 z = pos;
  float dr = 1.0;
  float r = 0.0;
  float Power = 8.0;
  float Bailout = 10.;
  int i = 0;
  float it = 0.;
  for (int i = 0; i < 10; ++i) {
    r = length(z);
    if (r > Bailout) break;
    float zr = pow(r, Power - 1.);
    dr = zr * Power * dr + 1.0;
    float theta = acos(z.z / r) * Power;
    float phi = atan(z.y, z.x) * Power;
    // convert back to cartesian coordinates
    z = r * zr *
            vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)) +
        pos;
  }
  return 0.5 * log2(r) * r / dr;
}
void sphereFold(inout vec3 z, inout float dz) {
  float r2 = dot(z, z);
  float minRadius2 = 5.;
  float fixedRadius2 = 50.;
  if (r2 < minRadius2) {
    // linear inner scaling
    float temp = (fixedRadius2 / minRadius2);
    z *= temp;
    dz *= temp;
  } else if (r2 < fixedRadius2) {
    // this is the actual sphere inversion
    float temp = (fixedRadius2 / r2);
    z *= temp;
    dz *= temp;
  }
}

void boxFold(inout vec3 z, inout float dz) {
  float foldingLimit = 20.;
  z = clamp(z, -foldingLimit, foldingLimit) * 2.0 - z;
}
float mandelbox(vec3 z) {
  float Scale = 4.;
  int Iterations = 15;
  vec3 offset = z;
  float dr = 1.;
  for (int n = 0; n < Iterations; n++) {
    boxFold(z, dr);     // Reflect
    sphereFold(z, dr);  // Sphere Inversion

    z = Scale * z + offset;  // Scale & Translate
    dr = dr * abs(Scale) + 1.0;
  }
  float r = length(z);
  return r / abs(dr);
}

vec4 de(vec3 p) {
  // p.xy*=vec2(cos(mk_time()),sin(mk_time()));
  p.xz = rotate(p.xz, mk_time() * 0.2);
  // p.y +=sin(mk_time()+p.z+cos(p.x*0.7))*0.1;
  // p.xz = rotate(p.xz,p.y*cos(mk_time())*1.);

  // return vec4(mandelbulb(p),vec3(1.));

  //return vec4(fractal(p), vec3(1.));

  p = repeat(p, vec3(0.75));

  p.yz = rotate(p.yz, mk_audio_volume().x*mk_audio_volume().x*20.0 +mk_time()*2.0);
  p.xz = rotate(p.xz, p.y * cos(mk_time()) * 20.);
  // p.yz = rotate(p.yz,p.x*sin(mk_time()*0.5)*50.);
  return mix(box(p, vec3(0.1), vec3(1.)), torus(p, vec2(0.1, 0.05), vec3(1.)),
             sin(mk_time()) * 0.5 + 0.5);
  return box(p, vec3(0.1), vec3(1.));
  return torus(p, vec2(0.1, 0.05), vec3(1.));
}

vec3 get_normal(vec3 p) {
  vec3 xDir = vec3(0.001, 0., 0.);
  vec3 yDir = vec3(0., 0.001, 0.);
  vec3 zDir = vec3(0., 0., 0.001);

  return normalize(vec3(de(p + xDir).r - de(p - xDir).r,
                        de(p + yDir).r - de(p - yDir).r,
                        de(p + zDir).r - de(p - zDir).r));
}
layout(location = 0) out vec4 fragColor; 
void main() {
#ifndef DEPTH_ONLY
  // light.y = sin(mk_time()*0.4)*1.-1.;
  light.x = cos(mk_time() * 0.4) * 5.;

  float dist = 1.;
  float total_dist = 1.;
  float break_weight = 0.0;

  vec3 pos = vec3(gl_FragCoord.xy / mk_screen_size().xy - 0.5, 1.);
  vec3 dir = normalize(vec3(-pos.xy, -1.));
  float iterations = 0.;
  float max_its = 80.;
  while (dist > 0.0000005 * iterations && dist * iterations < 1000.) {
    dist = de(pos).r;
    iterations += 1.;
    total_dist += dist;
    pos += dir * dist;
  }
  vec3 n = get_normal(pos);
  float occlusion = 1.0;
  float att = 1.;
  float mult = 1.0;
  if (dist > 0.001 * iterations) mult = 0.0;
  // vec3
  // c=calculate_lighting_blinn_phong(pos,n,dir,vec3(1.),vec3(1.),vec3(1.),
  // 100. ); n = normalize(cross(dFdx(pos), dFdy(pos)));

  fragColor = vec4(mix(n, vec3(0.1), total_dist * 0.02), 1.);
  float ao = 1. - iterations * 0.014;
  vec3 light = normalize(vec3(0, 10, -4) - pos);
  vec3 halfv = normalize(light + dir);
  float NdotL = clamp(dot(n, light), 0., 1.);
  vec3 c = (NdotL * vec3(0.2, 1., 0.3) + 0.3) * vec3(0.2, 0.8, 1.);
  if (NdotL > 0.) {
    float NdotH = clamp(dot(n, halfv), 0., 1.);
    c += pow(NdotH, 100.0) * vec3(0.2, 1., 0.3);
  }

  fragColor.rgb = c * ao * mult;
  // gl_FragColor.rgb = vec3(0.,1.-iterations*0.02,0.);
  // gl_FragColor.rgb = n;
  // gl_FragColor.rgb = vec3((total_dist-2.5)*0.5);
  fragColor.w = 1.;
  // gl_FragDepth = -pos.z;
#endif
}
#endif
